apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: postgres-service
  replicas: {{ .Values.postgres.replicas }}
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        {{- range $key, $value := .Values.postgres.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.postgres.port }}
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        {{- if .Values.postgres.initdb.enabled }}
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
        {{- end }}
      volumes:
      {{- if .Values.postgres.initdb.enabled }}
      - name: initdb
        configMap:
          name: postgres-initdb
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.postgres.pvc.size }}
      storageClassName: standard

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: {{ .Values.postgres.servicePort }}
    targetPort: {{ .Values.postgres.port }}
  type: ClusterIP

---
{{- if .Values.postgres.initdb.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb
data:
{{- range $key, $value := .Values.postgres.initdb.scripts }}
  {{ $key }}: |
{{ $value | indent 4 }}
{{- end }}
{{- end }}